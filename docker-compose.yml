version: '3.8'

services:

  flaskr:
    build:
      context: ./flaskr
      dockerfile: ../Dockerfile  # Usa el mismo Dockerfile para todos
    container_name: flaskr
    volumes:
      - ./flaskr:/app
    ports:
      - "8000:8000"  # Puerto del host mapeado al contenedor
    depends_on:
      - redis
    command: ["gunicorn", "app:app", "--bind", "0.0.0.0:8000"]

  microservicio_1:
    build:
      context: ./microservicio_1
      dockerfile: ../Dockerfile  # Usa el mismo Dockerfile para todos
    container_name: microservicio_1
    volumes:
      - ./microservicio_1:/app
    ports:
      - "8001:8001"  # Puerto del host diferente
    command: ["gunicorn", "app:app", "--bind", "0.0.0.0:8001"]

  microservicio_2:
    build:
      context: ./microservicio_2/flaskr
      dockerfile: ../../Dockerfile  # Usa el mismo Dockerfile para todos
    container_name: microservicio_2
    volumes:
      - ./microservicio_2/flaskr:/app
    ports:
      - "8002:8002"  # Puerto del host diferente
    depends_on:
      - redis
    command: ["gunicorn", "app:app", "--bind", "0.0.0.0:8002"]

  celery_flaskr:
    build:
      context: ./flaskr
      dockerfile: ../Dockerfile
    container_name: celery_flaskr
    depends_on:
      - redis
    command: ["celery", "-A", "tareas", "worker", "--loglevel=info"]

  celery_microservicio_2:
    build:
      context: ./microservicio_2/flaskr
      dockerfile: ../../Dockerfile
    container_name: celery_microservicio_2
    depends_on:
      - redis
    command: ["celery", "-A", "tareas", "worker", "--loglevel=info"]


  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - flaskr
      - microservicio_1
      - microservicio_2

  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: tabla
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Monta un volumen para la persistencia de datos

  redis:
    image: redis:latest
    ports:
      - "6379:6379"

volumes:
  postgres_data:  # Define un volumen para la persistencia de datos de PostgreSQL